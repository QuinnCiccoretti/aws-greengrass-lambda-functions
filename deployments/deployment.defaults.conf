conf {
  ggds = []
  core {
    syncShadow = true
    roleName = "GreengrassCoreRole"
    roleAssumeRolePolicy = {
      Version = "2012-10-17"
      Statement = [
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            Service = "greengrass.amazonaws.com"
          }
        }
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            Service = "credentials.iot.amazonaws.com"
          }
        }
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            Service = "lambda.amazonaws.com"
          }
        }
      ]
    }
    rolePolicies = [
      "arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess"
      "arn:aws:iam::aws:policy/AWSIoTFullAccess"
      "arn:aws:iam::aws:policy/AWSGreengrassFullAccess"
      "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      "arn:aws:iam::aws:policy/AmazonSageMakerReadOnly"
      "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    ]
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Action = ["iot:*", "greengrass:*"]
          Effect = "Allow"
          Resource = ["*"]
        }
        {
          Action = ["iam:GetRole", "iam:PassRole"]
          Effect = "Allow"
          Resource = ["arn:aws:iam::"${ACCOUNT_ID}":role/"${conf.core.roleName}]
        }
      ]
    }
  }
  lambda {
    roleName = "GreengrassLambdaRole"
    roleAssumeRolePolicy = {
      Version = "2012-10-17"
      Statement = [
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            Service = "lambda.amazonaws.com"
          }
        }
      ]
    }
  }
}
